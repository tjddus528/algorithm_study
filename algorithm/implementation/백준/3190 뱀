n = int(input())
k = int(input())    # 사과의 개수

game = [[0] * (n+1) for _ in range(n+1)]    # 맵 정보

# 사과 놓기
for i in range(k):
    x, y = map(int, input().split())
    game[x][y] = 4

# 방향 회전 정보
l = int(input())
moves = []
for i in range(l):
    s, d = input().split()
    moves.append((int(s), d))

def turn(direction, c):
    if c == 'L':
        direction = (direction - 1) % 4
    else:
        direction = (direction + 1) % 4
    return direction

# 동 남 북 서
dx = [0, 1, 0, -1]
dy = [1, 0, -1, 0]
x, y = 1, 1
game[x][y] = 2
snake = [(1,1)]
direction = 0       # 방향 (동쪽)
total_time = 0
move_index = 0
while True:
    nx = x + dx[direction]
    ny = y + dy[direction]
    total_time += 1

    # 벽을 만나거나 몸통을 만나면 종료
    if nx > n or nx < 1 or ny > n or ny < 1 or game[nx][ny] == 2:
        stop = 1
        break

    else:
        # 사과를 먹으면 머리 정보 업데이트, 꼬리는 그대로
        if game[nx][ny] == 4:
            game[nx][ny] = 2
            snake.append((nx, ny))
        # 사과가 없으면 머리 정보 업데이트, 꼬리 지우기
        if game[nx][ny] == 0:
            game[nx][ny] = 2
            snake.append((nx, ny))
            rx, ry = snake.pop(0)
            game[rx][ry] = 0

    x, y = nx, ny
    # 회전 방향 정보 업데이트
    if move_index < l and total_time == moves[move_index][0]:
        direction = turn(direction, moves[move_index][1])
        move_index += 1


print(total_time)
