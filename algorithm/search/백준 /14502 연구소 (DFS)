# https://www.acmicpc.net/problem/14502

from collections import deque
import sys
n, m = map(int, sys.stdin.readline().split())
graph = [[] for _ in range(n+1)]
# visited = [[False]*(m+1) for _ in range(n+1)]
wall = []
vir = []
for i in range(1, n+1):
    graph[i] = [0] + list(map(int, sys.stdin.readline().split()))
    for j in range(1, m+1):
        if graph[i][j] == 0: wall.append([i,j])
        if graph[i][j] == 2: vir.append([i,j])


def dfs(x, y, visited):
    # 북동남서(시계방향)
    dx = [-1, 0, 1, 0]
    dy = [0, 1, 0, -1]
    for d in range(4):
        nx = x + dx[d]
        ny = y + dy[d]
        if nx < 1 or nx > n or ny < 1 or ny > m:
            continue
        if visited[nx][ny] == True:
            continue
        if graph[nx][ny] == 1:
            continue
        visited[nx][ny] = True
        visited = dfs(nx, ny, visited)
    return visited

def go():
    visited = [[False]*(m+1) for _ in range(n+1)]
    # 2. 바이러스를 퍼뜨린다.
    for i in range(len(vir)):
        x, y = vir[i][0], vir[i][1]
        visited[x][y] = True
        visited = dfs(x, y, visited)

    # 3. 안전 영역의 크기를 구한다.
    count = 0
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            if graph[i][j] == 0:
                if graph[i][j] == 0 and visited[i][j] == False:
                    count += 1
    return count


# # 1. 벽을 3개 세운다
l = len(wall)
result = 0
for i in range(l):
    for j in range(i):
        for k in range(j):
            graph[wall[i][0]][wall[i][1]] = 1
            graph[wall[j][0]][wall[j][1]] = 1
            graph[wall[k][0]][wall[k][1]] = 1
            # 2. 바이러스를 퍼뜨린 뒤
            # 3. 안전 영역을 계산한다.
            result = max(result, go())
            graph[wall[i][0]][wall[i][1]] = 0
            graph[wall[j][0]][wall[j][1]] = 0
            graph[wall[k][0]][wall[k][1]] = 0


print(result)
