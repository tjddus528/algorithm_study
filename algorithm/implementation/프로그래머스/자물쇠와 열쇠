# https://school.programmers.co.kr/learn/courses/30/lessons/60059#


def solution(key, lock):
    answer = False
    n = len(lock)
    new_lock = [[0] * 3 * n for _ in range(3 * n)]
    for i in range(n):
        new_lock[i + n] = [0] * n + lock[i] + [0] * n

    match = 0
    for _ in range(4):
        # key + new_lock
        result = [item[:] for item in new_lock]
        for dx in range(1, 2 * n):  # 0~2n
            for dy in range(1, 2 * n):  # 0~2n
                for i in range(len(key)):
                    for j in range(len(key)):
                        result[i + dx][j + dy] += key[i][j]
                # 확인
                if check_key_and_lock(result, n):
                    return True
                result = [item[:] for item in new_lock]
        key = rotate_a_matrix_by_90_degree(key)

    return answer


def check_key_and_lock(result, n):
    for i in range(n, 2 * n):
        for j in range(n, 2 * n):
            if result[i][j] != 1:
                return False
    return True


# 2차원 리스트를 시계빙향(오른쪽) 90도 회전한 결과를 반환하는 함수
def rotate_a_matrix_by_90_degree(a):
    n = len(a)  # 행 길이 계산
    m = len(a[0])  # 열 길이 계산
    result = [[0] * n for _ in range(m)]
    for i in range(n):
        for j in range(m):
            result[j][n - i - 1] = a[i][j]
    return result
