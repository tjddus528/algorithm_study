# 정렬 라이브러리는 최악의 경우에도 시간 복잡도 O(NlogN)을 보장한다
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]

# 1. sorted 함수
# 퀵 정렬과 동작 방식이 비슷한 병합 정렬을 기반으로 함
# 병합 정렬은 일반적으로 퀵 정렬보다 느리지만 최악의 경우에도 O(NlogN)을 보장함
# sorted 함수는 리스트, 딕셔너리 자료형 등을 입력받아서 정렬한 결과를 출력한다. 집합 자료형이나 딕셔너리 자료형을 입력받아도 결과를 리스트 자료형
result = sorted(array)
print(result)

# 2. sort 함수
# 리스트 내부 원소를 바로 정렬
# 리스트 객체의 내장 함수인 sort 함수 이용
# 별도의 정렬될 리스트가 반화되는 것이 아닌 내부 원소가 바로 정렬
array.sort()
print(array)

# sorted, sort함수에서 key 매개변수로 정렬 기준 입력받기
# key 값으로는 하나의 함수가 들어가야 하며 이는 정렬 기준이 된다.
array = [('바나나', 2),('사과', 5),('당근', 3)]
def setting(data):
  return data[1]
result = sorted(array, key=setting)
print(result)

# key 매개변수에 람다 함수를 사용할 
result = sorted(array, key = lambda x: x[1], reverse = True)
print(result)
