# union-find

def find_parent(parent, x):
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]
def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b

v, e = map(int, input().split())    # 노드의 개수, 간선의 개수
parent = [0] * (v+1)                # 부모 테이블 생성

for i in range(1, v+1):             # 부모 테이블을 자기 자신으로 초기화
    parent[i] = i

for i in range(1, e+1):             # union 연산을 각각 수행
    a, b = map(int, input().split())
    union_parent(parent, a, b)

print("각 원소가 속한 집합: ", end = ' ')
for i in range(1, v+1):             # 각 원소가 속한 집합 출력
    print(find_parent(parent, i), end = ' ')

print()

print("부모 테이블: ", end = ' ')
for i in range(1, v+1):             # 부모 테이블 내용 출력
    print(parent[i], end = ' ')
